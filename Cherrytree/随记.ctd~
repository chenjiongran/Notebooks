<?xml version="1.0" ?>
<cherrytree>
	<node custom_icon_id="0" foreground="" is_bold="False" name="【C#】HttpHelper" prog_lang="c-sharp" readonly="False" tags="" ts_creation="1496802808.16" ts_lastsave="1496803029.8" unique_id="1">
		<rich_text>public class HttpHelper
{

    /// &lt;summary&gt;
    /// 通过get方式请求页面，传递一个实例化的cookieContainer
    /// &lt;/summary&gt;
    /// &lt;param name=&quot;postUrl&quot;&gt;&lt;/param&gt;
    /// &lt;param name=&quot;Referer&quot;&gt;&lt;/param&gt;
    /// &lt;returns&gt;&lt;/returns&gt;
    public static ArrayList GetHtmlData(string postUrl, string referer)
    {
        CookieContainer cookie = new CookieContainer();
        return GetHtmlData(postUrl, referer, cookie);
    }
    /// &lt;summary&gt;
    /// 通过get方式请求页面，传递一个实例化的cookieContainer
    /// &lt;/summary&gt;
    /// &lt;param name=&quot;postUrl&quot;&gt;&lt;/param&gt;
    /// &lt;param name=&quot;Referer&quot;&gt;&lt;/param&gt;
    /// &lt;param name=&quot;cookie&quot;&gt;&lt;/param&gt;
    /// &lt;returns&gt;&lt;/returns&gt;
    public static ArrayList GetHtmlData(string url, string referer, CookieContainer cookie)
    {
        return GetHtmlData(url, referer, cookie, null);
    }
    /// &lt;summary&gt;
    /// 通过get方式请求页面，传递一个实例化的cookieContainer
    /// &lt;/summary&gt;
    /// &lt;param name=&quot;postUrl&quot;&gt;&lt;/param&gt;
    /// &lt;param name=&quot;Referer&quot;&gt;&lt;/param&gt;
    /// &lt;param name=&quot;cookie&quot;&gt;&lt;/param&gt;
    /// &lt;param name=&quot;proxy&quot;&gt;&lt;/param&gt;
    /// &lt;returns&gt;&lt;/returns&gt;

    public static ArrayList GetHtmlData(string url, string referer, CookieContainer cookie, WebProxy proxy)
    {
        return GetHtmlData(url, referer, cookie, proxy, Encoding.Default);
    }
    /// &lt;summary&gt;
    /// 通过get方式请求页面，传递一个实例化的cookieContainer
    /// &lt;/summary&gt;
    /// &lt;param name=&quot;postUrl&quot;&gt;&lt;/param&gt;
    /// &lt;param name=&quot;cookie&quot;&gt;&lt;/param&gt;
    /// &lt;returns&gt;&lt;/returns&gt;
    public static ArrayList GetHtmlData(string url, string referer, CookieContainer cookie, WebProxy proxy, Encoding encoding)
    {
        HttpWebRequestPara reqPara = new HttpWebRequestPara();
        reqPara.postUrl = url;
        reqPara.referer = referer;
        reqPara.cookie = cookie;
        reqPara.proxy = proxy;
        reqPara.encoding = encoding;
        return GetHtmlData(reqPara);
    }

    public static ArrayList GetHtmlData(HttpWebRequestPara reqPara)
    {
        reqPara.Method = &quot;GET&quot;;
        return HttpData(reqPara);
       
    }
    /// &lt;summary&gt;
    /// 发送POST请求 进行登录操作 并保存cookie
    /// &lt;/summary&gt;
    /// &lt;param name=&quot;postData&quot;&gt;&lt;/param&gt;
    /// &lt;param name=&quot;postUrl&quot;&gt;&lt;/param&gt;
    /// &lt;param name=&quot;Referer&quot;&gt;&lt;/param&gt;
    /// &lt;returns&gt;&lt;/returns&gt;
    public static ArrayList PostData(string postData, string postUrl, string referer)
    {
        CookieContainer cookie = (CookieContainer)System.Web.HttpContext.Current.Session[&quot;CookieContainer&quot;];
        return PostData(postData, postUrl, referer, cookie);
    }
    /// &lt;summary&gt;
    /// 发送POST请求 进行登录操作 并保存cookie
    /// &lt;/summary&gt;
    /// &lt;param name=&quot;postData&quot;&gt;&lt;/param&gt;
    /// &lt;param name=&quot;postUrl&quot;&gt;&lt;/param&gt;
    /// &lt;param name=&quot;Referer&quot;&gt;&lt;/param&gt;
    /// &lt;param name=&quot;cookie&quot;&gt;&lt;/param&gt;
    /// &lt;returns&gt;&lt;/returns&gt;
    public static ArrayList PostData(string postData, string postUrl, string referer, CookieContainer cookie)
    {
        return PostData(postData, postUrl, referer, cookie, null, Encoding.UTF8);
    }

    public static ArrayList PostData(string postData, string postUrl, string referer, CookieContainer cookie, WebProxy proxy, Encoding encoding)
    {
        HttpWebRequestPara p = new HttpWebRequestPara();
        p.postData = postData;
        p.postUrl = postUrl;
        p.referer = referer;
        p.ContentType = null;
        p.cookie = cookie;
        p.proxy = proxy;
        p.encoding = encoding;

        return PostData(p);
    }

    /// &lt;summary&gt;
    /// 发送POST请求 进行登录操作 并保存cookie
    /// &lt;/summary&gt;
    /// &lt;param name=&quot;postData&quot;&gt;&lt;/param&gt;
    /// &lt;param name=&quot;postUrl&quot;&gt;&lt;/param&gt;
    /// &lt;param name=&quot;cookie&quot;&gt;&lt;/param&gt;
    /// &lt;returns&gt;&lt;/returns&gt;
    public static ArrayList PostData(HttpWebRequestPara reqPara)
    {
        reqPara.Method = &quot;POST&quot;;
        return HttpData(reqPara);
    }

    public static ArrayList HttpData(HttpWebRequestPara reqPara)
    {
        Encoding encoding = reqPara.encoding ?? Encoding.UTF8;
        ArrayList list = new ArrayList();
        HttpWebRequest request;
        HttpWebResponse response;
        request = WebRequest.Create(reqPara.postUrl) as HttpWebRequest;
        request.Accept = reqPara.Accept ?? &quot;image/jpeg, application/x-ms-application, image/gif, application/xaml+xml, image/pjpeg, application/x-ms-xbap, application/vnd.ms-excel, application/vnd.ms-powerpoint, application/msword, application/QVOD, application/QVOD, */*&quot;;
        request.UserAgent = &quot;Mozilla/4.0 (compatible; MSIE 8.0; Windows NT 6.1; Trident/4.0; SLCC2; .NET CLR 2.0.50727; .NET CLR 3.5.30729; .NET CLR 3.0.30729; Media Center PC 6.0)&quot;;
        request.ContentType = reqPara.ContentType ?? &quot;application/x-www-form-urlencoded&quot;;
        if (reqPara.referer != &quot;&quot;)
            request.Referer = reqPara.referer;
        request.Headers.Add(&quot;Accept-Language&quot;, &quot;zh-CN,zh;q=0.8&quot;);
        request.Headers.Add(&quot;Accept-Encoding&quot;, &quot;gzip,deflate&quot;);
        request.Method = reqPara.Method == null ? &quot;POST&quot; : reqPara.Method.ToUpper();
        request.CookieContainer = reqPara.cookie;
        request.KeepAlive = false;
        request.ProtocolVersion = HttpVersion.Version10;
        request.AutomaticDecompression = DecompressionMethods.GZip | DecompressionMethods.Deflate;

        if (reqPara.proxy != null)
        {
            request.Proxy = reqPara.proxy;
        }
        if (reqPara.postData != null)
        {
            byte[] b = encoding.GetBytes(reqPara.postData);
            request.ContentLength = b.Length;
            using (Stream stream = request.GetRequestStream())
            {
                stream.Write(b, 0, b.Length);
            }
        }
        try
        {
            //获取服务器返回的资源
            using (response = request.GetResponse() as HttpWebResponse)
            {
                using (StreamReader reader = new StreamReader(response.GetResponseStream(), encoding))
                {
                    if (response.Cookies.Count &gt; 0)
                        reqPara.cookie.Add(response.Cookies);

                    list.Add(reader.ReadToEnd());
                    list.Add(reqPara.cookie);
                }
            }
        }
        catch (Exception wex)
        {
            list.Add(&quot;发生异常/n/r&quot; + wex.Message);

        }
        finally
        {
            request.Abort();
        }
        return list;
    }
    public class HttpWebRequestPara:ICloneable
    {

        public string postData;
        public string postUrl;
        /// &lt;summary&gt;
        /// 可为null
        /// &lt;/summary&gt;
        public string referer;
        /// &lt;summary&gt;
        /// 可为null
        /// &lt;/summary&gt;
        public string ContentType;
        public CookieContainer cookie;
        /// &lt;summary&gt;
        /// 可为null
        /// &lt;/summary&gt;
        public WebProxy proxy;
        /// &lt;summary&gt;
        /// 可为null
        /// &lt;/summary&gt;
        public Encoding encoding;
        /// &lt;summary&gt;
        /// 可为null
        /// &lt;/summary&gt;
        public string Accept;
        /// &lt;summary&gt;
        /// 可为null
        /// &lt;/summary&gt;
        public string Method;

        public object Clone()
        {
            return this.MemberwiseClone();
        }
    }
}</rich_text>
	</node>
	<node custom_icon_id="0" foreground="" is_bold="False" name="Kali 持久加密Usb启动" prog_lang="custom-colors" readonly="False" tags="" ts_creation="1496930911.22" ts_lastsave="1496930937.03" unique_id="2">
		<rich_text>分区
工具：parted
命令行</rich_text>
	</node>
</cherrytree>
